name: .NET CI with Docker Hub and OpenShift Deployment

env:
  DOCKER_USERNAME: mahmed0 # Docker Hub username
  DOCKER_IMAGE_NAME: kawa-docker-images # The repository name on Docker Hub
  APP_NAME: kawaassignmentservice # The application name in OpenShift
  IMAGE_TAG: ${{ github.sha }} # Unique tag per commit
  OPENSHIFT_NAMESPACE: kawaassignmentservice # OpenShift namespace
  APP_PORT: 8080 # The port your application listens on

on:
  push:
    branches:
      - master
      - testingopenshift

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-restore --verbosity normal
    

  build-and-push:
    needs: build-and-test
    name: Build and Push Docker image
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build the Docker image
      run: docker build -t $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$IMAGE_TAG .

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }} 
        password: ${{ secrets.DOCKER_PAT }}

    - name: Tag the Docker image to Docker Hub
      run: docker tag $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$IMAGE_TAG      $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:latest

    - name: Push the Docker image to Docker Hub 
      run: docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$IMAGE_TAG
    
  deployment-on-Openshift:
    needs: build-and-push
    name: Openshift logic
    runs-on: ubuntu-latest

    steps:
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true

    - name: Create OpenShift Namespace if it doesn't exist
      run: |
        if ! oc get project $OPENSHIFT_NAMESPACE; then
          oc new-project $OPENSHIFT_NAMESPACE
        else
          echo "Project $OPENSHIFT_NAMESPACE already exists"
        fi

    # Create Docker Hub secret in OpenShift
    - name: Create Docker Hub secret
      run: |
        oc create secret docker-registry my-dockerhub-secret \
          --docker-server=docker.io \
          --docker-username=${{ secrets.DOCKER_USERNAME }} \
          --docker-password=${{ secrets.DOCKER_PAT }} \
          --docker-email=musawwer_live@hotmail.com \
          -n ${{ env.OPENSHIFT_NAMESPACE }}
      continue-on-error: true        

    - name: Create Deployment in OpenShift
      run: |
        oc apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${{ env.APP_NAME }}
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        spec:
          selector:
            matchLabels:
              app: ${{ env.APP_NAME }}
          replicas: 1
          template:
            metadata:
              labels:
                app: ${{ env.APP_NAME }}
            spec:
              containers:
              - name: ${{ env.APP_NAME }}
                image: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                ports:
                - containerPort: ${{ env.APP_PORT }}
                env:
                - name: ASPNETCORE_URLS
                  value: "http://*:8080"

        EOF

    - name: Create Service in OpenShift
      run: |
        oc apply -f - <<EOF
        apiVersion: v1
        kind: Service
        metadata:
          name: ${{ env.APP_NAME }}
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        spec:
          selector:
            app: ${{ env.APP_NAME }}
          ports:
          - protocol: TCP
            port: 8080
            targetPort: ${{ env.APP_PORT }}
        EOF

    - name: Create Route in OpenShift
      run: |
        oc apply -f - <<EOF
        apiVersion: route.openshift.io/v1
        kind: Route
        metadata:
          name: ${{ env.APP_NAME }}
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        spec:
          to:
            kind: Service
            name: ${{ env.APP_NAME }}
          port:
            targetPort: ${{ env.APP_PORT }}
          tls:
            termination: edge  
        EOF

    - name: Check Rollout Status
      run: oc rollout status deployment/${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}
